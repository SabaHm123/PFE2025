pipeline {
    agent any

    environment {
        SONARQUBE_ENV = 'SonarQubeServer'
        DOCKER_COMPOSE_FILE = 'BackendPFE\\docker-compose.yml'
        PROJECT_DIR = 'BackendPFE'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üì• Cloning Git repository...'
                git url: 'https://github.com/SabaHm123/PFE2025.git', branch: 'main'
            }
        }

        stage('Start MySQL and MailDev') {
            steps {
                echo 'üê≥ Starting Docker containers...'
                dir("${PROJECT_DIR}") {
                    bat "docker-compose -f docker-compose.yml up -d"
                }

                echo '‚è≥ Waiting for MySQL to be ready...'
                bat '''
                    for /l %%x in (1, 1, 30) do (
                        docker exec mysql-sql-bsn mysqladmin ping -hlocalhost --silent && exit /b 0
                        timeout /t 2 >nul
                    )
                '''
            }
        }

        stage('Build Project') {
            steps {
                echo 'üîß Building Spring Boot app...'
                dir("${PROJECT_DIR}") {
                    bat "./mvnw.cmd clean install -DskipTests"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'üîç Running SonarQube analysis...'
                dir("${PROJECT_DIR}") {
                    withSonarQubeEnv("${SONARQUBE_ENV}") {
                        bat "./mvnw.cmd sonar:sonar"
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                echo 'üß™ Running tests...'
                dir("${PROJECT_DIR}") {
                    bat "./mvnw.cmd test"
                }
            }
            post {
                always {
                    echo 'üìÑ Publishing JUnit reports...'
                    junit "${PROJECT_DIR}\\target\\surefire-reports\\*.xml"
                }
            }
        }

        stage('Stop Docker Services') {
            steps {
                echo 'üõë Stopping containers...'
                dir("${PROJECT_DIR}") {
                    bat "docker-compose -f docker-compose.yml down"
                }
            }
        }
    }

    post {
        always {
            echo '‚úÖ Pipeline completed.'
        }
    }
}
